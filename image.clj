
(import '(java.awt Color)
        '(java.awt.image BufferedImage)
        '(java.io File)
        '(javax.imageio ImageIO))

(defn цвет [r g b]
  (Color. r g b 0xFF))

(def белый (.getRGB (цвет 0xFF 0xFF 0xFF)))
(defn create-image [w h]
  (let [image (BufferedImage. w h BufferedImage/TYPE_INT_RGB)]
    (doseq [x (range w) y (range h)]
      (.setRGB image x y белый))
    image))

(defn save-image [холст файл]
  (ImageIO/write холст "PNG" (File. файл)))

(defn взять-пиксель [отступ размер-графика смещение сдвиг]
  (let [x (+ отступ (first смещение) (first сдвиг))
        y (+ отступ (second смещение) (second сдвиг))]
    (and
      (>= x отступ) (>= y отступ)
      (< x (+ отступ (first размер-графика))) (< y (+ отступ (second размер-графика)))
      [x y])))    

(defn можно-перекрасить? [^BufferedImage холст пиксель центры-уиков]
  (and пиксель
    (not (contains? центры-уиков пиксель))
    (= белый (.getRGB холст (first пиксель) (second пиксель)))))

(defn перекрасить! [^BufferedImage холст [x y] ^Color цвет]
  (.setRGB холст x y (.getRGB цвет)))

(defn выделить [[смещение шаблон [[число цвет] & остальные]]]
  [смещение шаблон число цвет остальные])

(defn нанести [^BufferedImage холст отступ размер-графика данные]
  (let [центры-уиков (into #{} (map first данные))
        [первый & остальные] (map выделить данные)]
    (loop [очередь-ещё остальные, очередь-уже [], [смещение шаблон число цвет остальные] первый, номер 1]
      (let [пиксель (взять-пиксель отступ размер-графика смещение (first шаблон))]
        (if (можно-перекрасить? холст пиксель центры-уиков)
          (do (перекрасить! холст пиксель цвет)
            (let [число-цвет (if (pos? число) [(dec число) цвет] (first остальные))
                  след-остальные (if (pos? число) остальные (rest остальные))
                  в-очередь (if число-цвет [смещение (next шаблон) (first число-цвет) (second число-цвет) след-остальные])
                  след-очередь (if в-очередь (conj очередь-уже в-очередь) очередь-уже)]
              (if (empty? очередь-ещё)
                (when-not (empty? очередь-уже)
                  (println "- пройдена очередь" номер)
                  (recur (rest след-очередь) [] (first след-очередь) (inc номер)))
                (recur (rest очередь-ещё) след-очередь (first очередь-ещё) номер))))
          (recur очередь-ещё очередь-уже [смещение (next шаблон) число цвет остальные] номер))))))
